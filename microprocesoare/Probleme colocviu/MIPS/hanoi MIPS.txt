.data
msg:	
	.asciiz "Introduceti numarul de discuri :"
discul:
	.asciiz "Discul "
spatiu:
	.asciiz " "
sageata:
	.asciiz "->"
enter:
	.asciiz "\n"
	
.text
	.globl main
main : 
	subu $sp,$sp,24		# se pastreaza adresa de revenire in programul principal
						# stiva are 24 octeti lungime (ra + fp + a0...a3 = 6, 6*4 = 24)
	sw $ra,20($sp)
	sw $fp,16($sp)		# se pastreaza pe stiva indicatorul de cadru cu 
						# valoarea din momentul inceperii executiei programului
	addu $fp,$sp,24		# se determina indicatorul de cadru
	puts msg		
	li $v0,5			#se citeste n de la tastatura
	syscall				
	move $a0,$v0
	li $a1, 1			# tija sursa
	li $a2, 2			# tija destinatie
	li $a3, 3			# tija manevra
	jal hanoi			#jump si salvare legatura la hanoi	

	lw $ra,20($sp)		# se reface adresa de revenire din subrutina 
	lw $fp,16($sp)		# se reface indicatorul de cadru
	addu $sp,$sp,24		# se reface indicatorul de stiva
	done
#punem functia recursiva dupa directiva done. In acest fel, functia devine o zona separata
#de cod, fiind executata numai cand este apelata (cu jal <=> call). Simulam in acest fel
#directiva proc din asamblare
hanoi:
	subu $sp,$sp,24
	sw $ra,20($sp)
	sw $fp,16($sp)
	addu $fp,$sp,24
	sw $a0,0($fp)		#se salveaza pe stiva $a0 (parametrul functiei)
	lw $2,0($fp)		#se incarca in $v0 parametrul (adica pe $a0)
	bgt $v0, 1, cond	#daca $v0 > 1 treci la cond
	move $t0, $a0		#salvare $a0 (instr. puts modifica $a0)
	puts discul			#afisare mesaj (CAZUL n = 1)
	puti $t0
	puts spatiu
	puti $a1
	puts sageata
	puti $a2
	puts enter
	move $a0, $t0		#restaurare $a0
	j sfarsit			#sari la sfarsit
cond:
	lw $3,0($fp)		#se incarca in $v1 parametrul
	subu $2,$3,1		#$v0 = $v1 - 1 (adica $v0 = n-1)
	sw $a0, 0($fp)		#PUSH $a0 (urmeaza decrementarea lui $a0 si de aceea nu-l salvez)
						#impreuna cu $a1,...,$a3
	move $a0,$2			#$a0 = $v0 ( = n-1, adica se pregateste parametrul functiei)
	sw $a1, 4($fp)		#salvez parametrii pe stiva (PUSH registrii modificati)
	sw $a2, 8($fp)	
	sw $a3, 12($fp)
	move $t1, $a1		#apelez hanoi(n-1,1,3,2)
	move $t2, $a2
	move $t3, $a3
	move $a1, $t1
	move $a2, $t3
	move $a3, $t2
	jal hanoi			#apel functie (hanoi(n-1,1,3,2)) => in $v0 am fact(n-1)
	lw $a1, 4($fp)	 	#preiau valorile parametrilor de pe stiva (POP registrii)
	lw $a2, 8($fp)	
	lw $a3, 12($fp)	
	lw $a0, 0($fp)
	move $t0, $a0		#salvare $a0 (instr. puts modifica $a0)
	puts discul
	puti $t0
	puts spatiu
	puti $a1
	puts sageata
	puti $a2
	puts enter	
	move $a0, $t0		#restaurare $a0
	lw $3,0($fp)		#se incarca in $v1 parametrul
	sw $a0, 0($fp)		#PUSH $a0
	subu $2,$3,1		#$v0 = $v1 - 1 (adica $v0 = n-1)
	move $a0,$2			#$a0 = $v0 ( = n-1, adica se pregateste parametrul functiei)
	sw $a1, 4($fp)		#PUSH registrii
	sw $a2, 8($fp)	
	sw $a3, 12($fp)
	move $t1, $a1
	move $t2, $a2
	move $t3, $a3
	move $a1, $t3
	move $a2, $t2
	move $a3, $t1
	jal hanoi			#apel functie (hanoi(n-1,3,2,1)) => in $v0 am fact(n-1)
sfarsit:
	lw $ra,20($sp)		#se reface adresa de revenire din subrutina
	lw $fp,16($sp)		#se reface indicatorul de cadru	
	addu $sp,$sp,24		#se reface indicatorul de stiva
	j $ra				#revenire din procedura (j $ra <=> ret)

	